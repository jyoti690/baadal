#  Configure the Python logging facility.
#  To use this file, copy it to logging.conf and edit logging.conf as required.
#  See http://docs.python.org/library/logging.html for details of the logging facility.
#  Note that this is not the newer logging.config facility.
#
#  The default configuration is console-based (stdout) for backward compatibility;
#  edit the [handlers] section to choose a different logging destination.
#
#  Note that file-based handlers are thread-safe but not mp-safe;
#  for mp-safe logging, configure the appropriate syslog handler.
#
#  To create a configurable logger for application 'myapp', add myapp to
#  the [loggers] keys list and add a [logger_myapp] section, using
#  [logger_welcome] as a starting point.
#
#  In your application, create your logger in your model or in a controller:
#
#  import logging
#  logger = logging.getLogger("web2py.app.myapp")
#  logger.setLevel(logging.DEBUG)
#
#  To log a message:
#
#  logger.debug("You ought to know that %s" % details)
#
#  Note that a logging call will be governed by the most restrictive level
#  set by the setLevel call, the [logger_myapp] section, and the [handler_...]
#  section. For example, you will not see DEBUG messages unless all three are
#  set to DEBUG.
#
#  Available levels: DEBUG INFO WARNING ERROR CRITICAL

[loggers]
keys=root,baadal

[handlers]
keys=rotatingFileHandler

[formatters]
keys=simpleFormatter

[logger_root]
level=ERROR
handlers=rotatingFileHandler

[logger_baadal]
level=DEBUG
qualname=web2py.app.baadal
handlers=rotatingFileHandler
propagate=0


[handler_rotatingFileHandler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=simpleFormatter
args=("applications/baadal/log/baadal.log", "a", 1000000, 5)


[formatter_simpleFormatter]
format=%(asctime)s %(levelname)s %(filename)s %(funcName)s():%(lineno)d %(message)s
datefmt=
